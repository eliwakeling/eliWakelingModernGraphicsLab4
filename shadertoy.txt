// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// MODIFIED BY ELI WAKELING

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

float lenSqr(vec2 x){
return dot (x,x);
}

struct sSphere
{
	vec4 center;
    float radius;

};
    
struct pLight
{
	vec4 center;
    vec3 color;
    float intensity;

};

float diffuseCoef (in vec3 normal, in vec3 position, in vec3 lightCenter) {
    
    //Calculate Light Vector.
    //vec3 lightVec = position - lightCenter;
    vec3 lightVec = normalize(position - lightCenter);
    //Calculate the diffuse Coefficient;
    float diffuseCoef = max(0.0, dot(normal, lightVec));        
    return diffuseCoef;
    }

float attinuation (in float intensity, in float dist) {
 
   //Establish proper order of opperations.
   float dist1 = dist / intensity;
   float dist2 = (dist * dist) / (intensity * intensity);
   //Find the final Attinuation.
   float att = 1.0 / (1.0 + dist1 + dist2);
   return att;
   
}

vec3 finalColor(in float diffcoef, in float attinu, in vec3 surfaceColor, in vec3 lightColor ){
	
    //Find the final color of the sphere in lambert.
    float diffIntense = diffcoef * attinu;
    vec3 finalCol = diffIntense * surfaceColor * lightColor;
    
    return finalCol;

}

float phongSpecCoef(vec4 viewport, vec3 position, vec3 normal, vec3 lightCenter, bool blinPhong) {

    //Set Vectors
    vec3 viewVector = normalize(viewport.xyz - position);
    vec3 lightVec = normalize(position - lightCenter);
    vec3 refLightVec = reflect(-lightVec, normal);
    float specCoef = max(0.0, dot(viewVector, normal));
    
    //Change the specular Coefficient if we are using blin-phong shading.
    if (blinPhong == true){
    vec3 halfwayVector = normalize(lightVec + normal);
    specCoef = max(0.0, dot(halfwayVector, normal));
    
    }
    
    return specCoef;
    
}
    

float phongSpecIntensity(in float phongSpecCoef, in float power, bool blinPhong){

    //If we are using blin-Phong Shading.
    if (blinPhong == true){
    power *= 4.0;
    }
        
    //Find the specular intensity.
    float specIntensity = pow(phongSpecCoef, power);
    return specIntensity;
    
}

vec3 phongColor(float globAmbInt, in vec3 globAmbCol, in float diffuseInt, in vec3 surfColor, in float specIntensity, in vec3 specRefCol, in vec3 lightColor)
{

    //Set Order of opperations.
    vec3 combinedDiffuse = surfColor * diffuseInt;
    vec3 combinedSpecular = specIntensity * specRefCol;
    vec3 combinedAmbience = globAmbCol * globAmbInt;
    
    //Calculate the color of the scene.
    vec3 finalColor = combinedAmbience + (combinedDiffuse + combinedSpecular) * lightColor;
    
    return finalColor;

}

bool initSphere(out sSphere sphere, in vec3 center, in float radius)
{
	//Set sphere centerpoint.
    sphere.center = asPoint(center);
    
    if (radius > 0.0){
    //Set radius size.
    sphere.radius = radius;
    return true;
    }
    //Set Radius if Radius is invalid.
    sphere.radius = 1.0;
    return false;
}

bool initLight(out pLight light, in vec3 center, in vec3 color, in float intensity){
	
    //set light centerpoint and color.
    light.center = asPoint(center);
    light.color = color;
    
    if (intensity > 0.0){
    	light.intensity = intensity;
    	return true;
    }
    //Set Intensity for the user if invalid.
    light.intensity = 1.0;
    return false;

}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
    
    // SCENE
    sSphere sphere;
    float diffCoef;
    pLight light1;
    pLight light2;
    pLight light3;
    pLight light4;
    //The exponent used to find the Specular intensity.
    float highlightExpo = 4.0;
    //Initialize the sphere
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    //Initialize the lights.
    initLight(light1, vec3(-0.3, 0.3, -4.5), vec3(1.0, 1.0, 1.0), 6.0);
    initLight(light2, vec3(0.3, 0.5, -4.5), vec3(1.0, 1.0, 1.0), 6.0);
    initLight(light3, vec3(0.4, 0.3, -4.5), vec3(1.0, 1.0, 1.0), 6.0);
    initLight(light4, vec3(0.6, 0.3, -4.5), vec3(1.0, 1.0, 1.0), 6.0);
    
    //Calculate Surface normals.
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSqr(dp.xy);
    float rSq = sphere.radius * sphere.radius;
    if (lSq <= rSq)
    {
        //Finding the sphere normals
    	dp.z = rSq - lSq;
        
        vec3 position = (sphere.center.xyz) + vec3(dp.x, dp.y, sqrt(dp.z));
        float dist = length(position - light1.center.xyz);
        
        vec3 normal = (((position - sphere.center.xyz) / sphere.radius) * 0.5 + 0.5);
        
        //Comment out all shading lines except for the shading you are currently using.
        
        //Lambert Shading.
        float diff1;
        diff1 = diffuseCoef(normal, position, light1.center.xyz);
        float attinu = attinuation(light1.intensity, dist);
        vec3 finalCol;
        finalCol = finalColor(diff1, attinu, vec3(1.0, 1.0, 1.0), light1.color.xyz );
        return vec4(finalCol, 1);
        
        //Phong Shading
        //float diff1;
        //diff1 = diffuseCoef(normal, position, light1.center.xyz);
        //float attinu = attinuation(light1.intensity, dist);
        //float diffuseInt = diff1 * attinu;
        //float specCoef;
        //specCoef = phongSpecCoef(rayOrigin, position, normal, light1.center.xyz, false);
        //float specInt = phongSpecIntensity(specCoef, highlightExpo, false);
        //vec3 finalPhong = phongColor(0.0, vec3(1.0, 1.0, 1.0), diffuseInt, vec3(1.0, 1.0, 1.0),specInt, vec3(1.0, 1.0, 1.0), light1.color.xyz);
        //return vec4(finalPhong, 1);
        
        //Blin-Phong Shading
        //float diff1;
        //diff1 = diffuseCoef(normal, position, light1.center.xyz);
        //float attinu = attinuation(light1.intensity, dist);
        //float diffuseInt = diff1 * attinu;
        //float specCoef;
        //specCoef = phongSpecCoef(rayOrigin, position, normal, light1.center.xyz, true);
        //float specInt = phongSpecIntensity(specCoef, highlightExpo, true);
        //vec3 finalPhong = phongColor(0.0, vec3(1.0, 1.0, 1.0), diffuseInt, vec3(1.0, 1.0, 1.0),specInt, vec3(1.0, 1.0, 1.0), light1.color.xyz);
        //return vec4(finalPhong, 1);
        
    }
	
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}